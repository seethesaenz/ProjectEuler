# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of 
# this product? 
def largestProduct():
    # this was the number given
    bigNum = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615
    6078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504452445231
    6173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105
    1585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435
    2584907711670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224137565705
    6057490261407972968652414535100474821663704844031998900088952434506585412275886668811642717147992444292823086346567
    481391912316282458617866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416589
    60408071984038509624554443629812309878799272442849091888458015616609791913387549920052406368991256071760605886116467
    10940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

    list1 = []
    variable = 1
    biggestValue = 0
    num = 0
    # while bigNum is an int that is not 0 considered True
    while bigNum:
        # defining smolNum to be the modulus of bigNum % 10000000000000 aka the last 13 digits
        smolNum = bigNum % pow(10, 13)
        # making smolNum to string so i can iter
        for i in str(smolNum):
            # multiplying each iter of smolNum by each iter lol
            variable = variable * int(i)
        # comparing the the product of smolNum to biggestValue and replacing if bigger
        if variable > biggestValue:
            biggestValue = variable
            num = smol
        # redefining variable to 1 after multiply and checking if bigger
        variable = 1
        # decreasing bigNum by one digit
        bigNum //= 10
    print(biggestValue, num)


largestProduct()
